image: docker:latest

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE
  IMAGE_TAG_CURRENT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  IMAGE_TAG_ANDROID_CURRENT: $CI_REGISTRY_IMAGE:android-$CI_COMMIT_SHA
  IMAGE_TAG_ANDROID_LATEST: $CI_REGISTRY_IMAGE:android-latest
  IMAGE_TAG_ELECTRON_LINUX_CURRENT: $CI_REGISTRY_IMAGE:electron-linux-$CI_COMMIT_SHA
  IMAGE_TAG_ELECTRON_WINDOWS_CURRENT: $CI_REGISTRY_IMAGE:electron-windows-$CI_COMMIT_SHA

stages:
  - build
  - test
  - native_build
  - qa

build_ionic:
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - echo "$GITLAB_DEPLOY_SSH_KEY" > airgap_cordova_secure_storage_deploy
    - echo "$GITLAB_DEPLOY_SSH_KEY_PUB" > airgap_cordova_secure_storage_deploy.pub
  script:
    - docker build --cache-from $IMAGE_TAG_LATEST -t $IMAGE_TAG .
    - docker tag $IMAGE_TAG $IMAGE_TAG_CURRENT
    - docker tag $IMAGE_TAG $IMAGE_TAG_LATEST
    - docker push $IMAGE_TAG_CURRENT
    - docker push $IMAGE_TAG_LATEST
  tags:
    - docker

unit:
  stage: test
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker run --name unit-$CI_COMMIT_SHA $IMAGE_TAG_CURRENT npm run test-ci
    - docker run --name lint-$CI_COMMIT_SHA $IMAGE_TAG_CURRENT npm run lint-ci
    - docker cp unit-$CI_COMMIT_SHA:/app/coverage/lcov.info lcov.info
    - docker cp lint-$CI_COMMIT_SHA:/app/lintReport.json lintReport.json
  after_script:
    - docker rm unit-$CI_COMMIT_SHA
    - docker rm lint-$CI_COMMIT_SHA
  tags:
    - docker
  artifacts:
    paths:
      - lcov.info
      - lintReport.json

build_android:
  stage: native_build
  when: manual
  tags:
    - docker
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - sed -i -e "s/version=\"0.0.0\"/version=\"$VERSION\"/g" config.xml
    - docker build -f build/android/Dockerfile -t $IMAGE_TAG_ANDROID_CURRENT --build-arg SENTRY_DSN=$SENTRY_DSN --build-arg BUILD_NR="$CI_PIPELINE_ID" --build-arg VERSION="$VERSION" .
    - docker run --name $CI_PIPELINE_ID $IMAGE_TAG_ANDROID_CURRENT echo "container ran."
    - docker cp $CI_PIPELINE_ID:/app/android-release-unsigned.apk airgap-wallet-release-unsigned-$CI_PIPELINE_ID.apk
    - docker cp $CI_PIPELINE_ID:/app/android-debug.apk airgap-wallet-debug-$CI_PIPELINE_ID.apk
  after_script:
    - docker rm -f $CI_PIPELINE_ID || true
  artifacts:
    paths:
      - airgap-wallet-release-unsigned-$CI_PIPELINE_ID.apk
      - airgap-wallet-debug-$CI_PIPELINE_ID.apk

build_ios:
  stage: native_build
  when: manual
  before_script:
    - echo "$IOS_BUILD_JSON" > build.json
    - echo "$IOS_EXPORT_OPTIONS" > exportOptions.plist
  script:
    - export DEVELOPER_DIR=$XCODE_PATH
    - sed -i -e "s/ios-CFBundleVersion=\"0.0.0\"/ios-CFBundleVersion=\"1.0.$CI_PIPELINE_ID\"/g" config.xml
    - sed -i -e "s/version=\"0.0.0\"/version=\"$VERSION\"/g" config.xml
    - nvm use v10.13.0
    - npm install
    - npm run disable-pure-getters
    - npm run configure-mangle
    - ionic cordova platform add ios
    - pushd platforms/ios/ && pod install && popd # Push plugin pod dependencies don't get installed sometimes
    - ionic cordova build ios --prod --release
    - find ./resources/ -name "*.png" -exec convert "{}" -alpha off "{}" \;
    - xcodebuild -workspace platforms/ios/AirGap\ Wallet.xcworkspace -scheme "AirGap Wallet" -destination generic/platform=iOS build -allowProvisioningUpdates
    - xcodebuild -workspace platforms/ios/AirGap\ Wallet.xcworkspace -scheme "AirGap Wallet" -sdk iphoneos -configuration AppStoreDistribution archive -archivePath platforms/ios/AirGap\ Wallet.xcarchive
    - xcodebuild -exportArchive -archivePath platforms/ios/AirGap\ Wallet.xcarchive -exportOptionsPlist exportOptions.plist -exportPath platforms/ios/ -allowProvisioningUpdates
    - xcrun altool --upload-app -f platforms/ios/AirGap\ Wallet.ipa -u $IOS_USERNAME -p $IOS_PASSWORD
  artifacts:
    paths:
      - platforms/ios/AirGap\ Wallet.ipa
  tags:
    - ios

build_web_extension:
  image: $IMAGE_TAG_CURRENT
  stage: native_build
  when: manual
  script:
    - sed -i -e "s/VERSION_NUMBER/$VERSION/g" src/providers/app-info/app-info.ts
    - sed -i -e "s/VERSION_CODE/$CI_PIPELINE_ID/g" src/providers/app-info/app-info.ts
    - npm install
    - npm run browserify-coinlib
    - npm run extension:prepare
    - npm run extension:build:all
    - sed -i -e "/\"version\"/c\ \"version\" :\"$VERSION\"," extension/manifest.json

  artifacts:
    name: 'web_extension'
    paths:
      - extension/
  tags:
    - docker

build_mac:
  stage: native_build
  when: manual
  script:
    - 'sed -i -e "s/\"version\": \"0.0.1\"/\"version\": \"${VERSION}\"/g" package.json'
    - npm install
    - npm run electron:build:mac
  artifacts:
    name: 'electron_macos'
    paths:
      - electron/build/airgap-wallet-$VERSION.dmg
      - electron/build/airgap-wallet-$VERSION.dmg.blockmap
      - electron/build/airgap-wallet-$VERSION-mac.zip
  tags:
    - ios

build_linux:
  stage: native_build
  when: manual
  tags:
    - docker
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -f build/electron/linux/Dockerfile -t $IMAGE_TAG_ELECTRON_LINUX_CURRENT --build-arg VERSION="$VERSION" .
    - docker run --name $CI_PIPELINE_ID $IMAGE_TAG_ELECTRON_LINUX_CURRENT echo "container ran."
    - docker cp $CI_PIPELINE_ID:/app/electron/build/airgap-wallet-$VERSION.AppImage electron/airgap-wallet-$VERSION.AppImage
  after_script:
    - docker rm -f $CI_PIPELINE_ID || true
  artifacts:
    name: 'electron_linux'
    paths:
      - electron/airgap-wallet-$VERSION.AppImage

build_windows:
  stage: native_build
  when: manual
  tags:
    - docker
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -f build/electron/windows/Dockerfile -t $IMAGE_TAG_ELECTRON_WINDOWS_CURRENT --build-arg VERSION="$VERSION" .
    - docker run --name $CI_PIPELINE_ID $IMAGE_TAG_ELECTRON_WINDOWS_CURRENT echo "container ran."
    - docker cp $CI_PIPELINE_ID:/app/electron/build/airgap-wallet-$VERSION.exe electron/arigap-wallet-$VERSION.exe
    - docker cp $CI_PIPELINE_ID:/app/electron/build/airgap-wallet-$VERSION.exe.blockmap electron/airgap-wallet-$VERSION.exe.blockmap
  after_script:
    - docker rm -f $CI_PIPELINE_ID || true
  artifacts:
    name: 'electron_windows'
    paths:
      - electron/airgap-wallet-$VERSION.exe
      - electron/airgap-wallet-$VERSION.exe.blockmap

qa:
  stage: qa
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker create --name qa-$CI_PIPELINE_ID $IMAGE_TAG_CURRENT npm run sonar-scanner -- -X
      -Dsonar.typescript.lcov.reportPaths=lcov.info
      -Dsonar.typescript.tslint.reportPaths=lintReport.json
      -Dsonar.test.inclusions=**/*.spec.ts
      -Dsonar.tests=src/
      -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts,src/assets/libs/**
      -Dsonar.sources=src/
      -Dsonar.host.url=$SONAR_URL
      -Dsonar.login=$SONAR_LOGIN
      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA
      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
      -Dsonar.gitlab.project_id=$CI_PROJECT_ID
      -Dsonar.branch.name=$CI_BUILD_REF_NAME
    - docker cp lcov.info qa-$CI_PIPELINE_ID:/app/lcov.info
    - docker cp lintReport.json qa-$CI_PIPELINE_ID:/app/lintReport.json
    - docker start -a qa-$CI_PIPELINE_ID
  after_script:
    - docker rm -f qa-$CI_PIPELINE_ID || true
  tags:
    - docker
